# -*- coding: utf-8 -*-
"""MCLP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1auO47zXfs3Wzs_v6Yk5M76xYabcj0LG3
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install folium

!pip install pulp

import pandas as pd

# 엑셀 파일 로드
file_path = '/content/drive/MyDrive/weight2.xlsx'
df = pd.read_excel(file_path)

df

# 히스토그램 그리기
plt.figure(figsize=(10, 6))
plt.hist(df['가중치'], bins=20, color='green', edgecolor='black')
plt.xlabel('Values')
plt.ylabel('Frequency')
plt.title('Histogram of Values')
plt.show()

import pandas as pd
from pulp import LpProblem, LpVariable, lpSum, LpMaximize, LpStatus, value
import numpy as np

# 후보지 위치와 가중치 설정
locations = df[['정류소명', 'X좌표', 'Y좌표']].set_index('정류소명').T.to_dict('list')
demand = df.set_index('정류소명')['가중치'].to_dict()

# 커버 범위 (km)
cover_range = 1

# 거리를 계산하는 함수 (단위: km)
def haversine(lat1, lon1, lat2, lon2):
    R = 6371  # 지구의 반지름 (km)
    dlat = np.radians(lat2 - lat1)
    dlon = np.radians(lon2 - lon1)
    a = np.sin(dlat / 2) * np.sin(dlat / 2) + np.cos(np.radians(lat1)) * np.cos(np.radians(lat2)) * np.sin(dlon / 2) * np.sin(dlon / 2)
    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))
    return R * c

# 각 후보지가 커버할 수 있는 수요지 계산
coverage_matrix = {}
for loc1 in locations.keys():
    coverage_matrix[loc1] = []
    lat1, lon1 = locations[loc1]
    for loc2 in locations.keys():
        lat2, lon2 = locations[loc2]
        if haversine(lat1, lon1, lat2, lon2) <= cover_range:
            coverage_matrix[loc1].append(loc2)

# 문제 설정
prob = LpProblem("MCLP", LpMaximize)

# 변수 설정
x = LpVariable.dicts('facility', locations.keys(), 0, 1, cat='Binary')
y = LpVariable.dicts('demand', demand.keys(), 0, 1, cat='Binary')

# 목적 함수: 커버된 수요의 최대화
prob += lpSum([demand[i] * y[i] for i in demand.keys()])

# 제약 조건: 각 수요지는 커버할 수 있는 후보지 중 하나에 의해 커버될 때만 커버됨
for i in demand.keys():
    prob += lpSum([x[j] for j in locations.keys() if i in coverage_matrix[j]]) >= y[i]

# 제약 조건: 선택할 후보지의 최대 수 (예: 2개)
prob += lpSum([x[j] for j in locations.keys()]) <= 3

# 문제 해결
prob.solve()

# 결과 출력
print(f"Status: {LpStatus[prob.status]}")

print("선택된 후보지:")
for j in locations.keys():
    if x[j].varValue == 1:
        print(f"Facility {j}")

print("커버된 수요지:")
for i in demand.keys():
    if y[i].varValue == 1:
        print(f"Demand {i}, 수요량: {demand[i]}")

print("총 커버된 수요:")
total_covered_demand = sum(demand[i] * y[i].varValue for i in demand.keys())
print(total_covered_demand)

# 결과 출력
print(f"Status: {LpStatus[prob.status]}")

print("선택된 후보지:", end=' ')
selected_facilities = []
for j in locations.keys():
    if x[j].varValue == 1:
        print(j,end='  ')
        selected_facilities.append(j)

import matplotlib.pyplot as plt

# 결과 출력
print(f"Status: {LpStatus[prob.status]}")

print("선택된 후보지:")
selected_facilities = []
for j in locations.keys():
    if x[j].varValue == 1:
        print(f"Facility {j}")
        selected_facilities.append(j)

print("커버된 수요지:")
covered_demands = []
for i in demand.keys():
    if y[i].varValue == 1:
        print(f"Demand {i}, 수요량: {demand[i]}")
        covered_demands.append(i)

print("총 커버된 수요:")
total_covered_demand = sum(demand[i] * y[i].varValue for i in demand.keys())
print(total_covered_demand)

# 시각화
plt.figure(figsize=(10, 8))

# 모든 후보지 위치 플롯팅
for loc in locations.keys():
    plt.scatter(locations[loc][1], locations[loc][0], c='blue', s=100, label='Facility' if loc == list(locations.keys())[0] else "")

# 커버된 수요지 위치 플롯팅 (선택된 후보지와 동일한 위치)
for loc in covered_demands:
    plt.scatter(locations[loc][1], locations[loc][0], c='green', s=50, label='Covered Demand' if loc == covered_demands[0] else "")

# 선택된 후보지 위치 플롯팅
for loc in selected_facilities:
    plt.scatter(locations[loc][1], locations[loc][0], c='red', s=200, marker='*', label='Selected Facility' if loc == selected_facilities[0] else "")


plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.title('MCLP Results')
plt.legend()
plt.grid(True)
plt.show()

# 지도 생성
m = folium.Map(location=[37.5665, 126.9780], zoom_start=14)

# 모든 후보지 위치 표시
for loc in locations.keys():
    folium.CircleMarker(
        location=[locations[loc][1], locations[loc][0]],
        radius=5,
        color='blue',
        fill=True,
        fill_color='blue',
        fill_opacity=0.6,
        popup=f"{loc} (Facility)"
    ).add_to(m)

# 선택된 후보지 위치 표시 및 커버 범위 표시
for loc in selected_facilities:
    folium.CircleMarker(
        location=[locations[loc][1], locations[loc][0]],
        radius=8,
        color='red',
        fill=True,
        fill_color='red',
        fill_opacity=0.6,
        popup=f"{loc} (Selected Facility)"
    ).add_to(m)

    folium.Circle(
        location=[locations[loc][1], locations[loc][0]],
        radius=cover_range * 1000,  # 반경을 미터 단위로 변환
        color='blue',
        fill=True,
        fill_color='blue',
        fill_opacity=0.2
    ).add_to(m)

# 커버된 수요지 위치 표시 (선택된 후보지와 동일한 위치)
for loc in covered_demands:
    folium.CircleMarker(
        location=[locations[loc][1], locations[loc][0]],
        radius=5,
        color='green',
        fill=True,
        fill_color='green',
        fill_opacity=0.6,
        popup=f"{loc} (Covered Demand)"
    ).add_to(m)

# 지도 출력
m.save('mclp_result.html')
m

import folium

# 보건소 위치 정보
locations = {
    '면목보건분소': {'latitude': 37.582956763264, 'longitude': 127.088069365426},
    '상봉보건지소': {'latitude': 37.59324096225239, 'longitude': 127.08322445964545},
    '중랑구보건소': {'latitude': 37.6065635856848, 'longitude': 127.09272484193}
}

# 커버 범위 (km)
cover_range = 1

# 지도 생성 (중심을 서울로 설정)
m = folium.Map(location=[37.5665, 126.9780], zoom_start=14)

# 보건소 위치 표시 및 커버 범위 그리기
for loc, coords in locations.items():
    # 단순한 점으로 보건소 위치 표시
    folium.CircleMarker(
        location=[coords['latitude'], coords['longitude']],
        radius=5,
        color='red',
        fill=True,
        fill_color='red',
        fill_opacity=0.6,
        popup=f"{loc}"
    ).add_to(m)

    # 투명한 원으로 반경 1km 표시
    folium.Circle(
        location=[coords['latitude'], coords['longitude']],
        radius=cover_range * 1000,  # 반경을 미터 단위로 변환
        color='blue',
        fill=True,
        fill_color='blue',
        fill_opacity=0.2
    ).add_to(m)

# 지도 출력
m.save('health_centers.html')
m